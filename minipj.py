from flask import Flask, render_template, Response, request, url_for, redirect, send_from_directory, abort, flash, jsonify
import cv2
import os
from werkzeug.utils import secure_filename
import threading
import time
import datetime
import glob
import numpy as np

# --- Import ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (SMTP) ---
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
# ---------------------------------------

app = Flask(__name__)
# ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô production
app.secret_key = 'your_secret_key' 

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ---
# ‚ö†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
UPLOAD_FOLDER = 'E:/AppServ/www/image'
VIDEO_FOLDER = 'E:/AppServ/www/Cam'
UNKNOWN_FOLDER = 'E:/AppServ/www/Unkown'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(VIDEO_FOLDER, exist_ok=True)
os.makedirs(UNKNOWN_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
app.config['VIDEO_FOLDER'] = VIDEO_FOLDER
app.config['UNKNOWN_FOLDER'] = UNKNOWN_FOLDER
# -----------------------------

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ---
SENDER_EMAIL = 'notsirapop1150@gmail.com'
SENDER_PASSWORD = 'jpvi xlib xfgh yryp' # üëà App Password ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
RECEIVER_EMAIL = 'sirapophandsomeboy@gmail.com'
SMTP_SERVER = 'smtp.gmail.com' 
SMTP_PORT = 465 
# ----------------------------------------------------

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ---
TARGET_SIZE = (150, 150) # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Resize ‡πÉ‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô upload_image
# ----------------------------------------------------

# --- ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Unknown Face ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô ---
# ‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
EMAIL_NOTIFICATION_INTERVAL = 10 
# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û unknown ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û
last_save_time = [0] 
# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
last_email_time = [0]
# -------------------------------------------------------------

# ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏´‡∏ô‡πâ‡∏≤ (‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Grayscale ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î)
def load_templates(folder: str):
    """‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î, ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Grayscale, ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤, ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î"""
    exts = ("*.png", "*.jpg", "*.jpeg", "*.bmp", "*.tif", "*.tiff")
    paths = []
    for e in exts:
        paths.extend(glob.glob(os.path.join(folder, e)))
    templates = []
    face_cascade_local = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")
    
    for p in sorted(paths):
        img = cv2.imread(p)
        if img is None: 
            continue
            
        # 1. ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Grayscale 
        if len(img.shape) == 3:
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        else:
            gray = img
        
        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        faces = face_cascade_local.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
        
        if len(faces) == 0:
            print(f"No face detected in template: {os.path.basename(p)}")
            continue
            
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö
        x, y, w, h = faces[0]
        
        # 3. ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏õ‡πá‡∏ô Grayscale)
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏ö
        margin = 10 
        y1, y2 = max(0, y - margin), min(gray.shape[0], y + h + margin)
        x1, x2 = max(0, x - margin), min(gray.shape[1], x + w + margin)
        
        face_crop = gray[y1:y2, x1:x2]
        
        templates.append((os.path.basename(p), face_crop))
        print(f"Loaded template: {os.path.basename(p)}, face size: {face_crop.shape}")
        
    return templates

# ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÅ‡∏•‡∏∞ Cascade Classifier ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏≠‡∏õ
templates = load_templates(UPLOAD_FOLDER)
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô matching ‡πÅ‡∏ö‡∏ö multi scale
def multi_scale_match(face_gray: np.ndarray, template_gray: np.ndarray, scales: list):
    """‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Template Matching ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
    best_score = 0
    h_face, w_face = face_gray.shape[:2]
    
    for s in scales:
        th, tw = max(1, int(template_gray.shape[0] * s)), max(1, int(template_gray.shape[1] * s))
        
        if th > h_face or tw > w_face: 
            continue # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        
        t_resized = cv2.resize(template_gray, (tw, th))
        
        # ‡πÉ‡∏ä‡πâ TM_CCOEFF_NORMED ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢‡∏Ñ‡∏•‡∏∂‡∏á
        res = cv2.matchTemplate(face_gray, t_resized, cv2.TM_CCOEFF_NORMED) 
        _, max_val, _, _ = cv2.minMaxLoc(res)
        
        if max_val > best_score: 
            best_score = max_val
            
    return best_score

# --- ‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Race Condition ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Unknown/Email ---
# ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Unknown ‡πÉ‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
unknown_lock = threading.Lock()
# --------------------------------------------------------------------------

def detect_face_templates(frame, threshold=0.5, scales=[0.8,0.9,1.0,1.1,1.2], min_size=50, save_unknown=True, save_interval=3):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï"""
    global last_save_time
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(min_size, min_size))
    detections = []
    current_time = time.time()

    for i, (x,y,w,h) in enumerate(faces):
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏¢‡∏≤‡∏¢‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö ROI ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ Template Matching
        margin = 10
        y1, y2 = max(0, y - margin), min(gray.shape[0], y + h + margin)
        x1, x2 = max(0, x - margin), min(gray.shape[1], x + w + margin)
        face_roi = gray[y1:y2, x1:x2]
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î x, y, w, h ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° margin) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á
        x_orig, y_orig, w_orig, h_orig = x, y, w, h
        
        best_label = "Unknown"
        best_score = 0
        
        # Template Matching
        for label, tmpl in templates:
            score = multi_scale_match(face_roi, tmpl, scales)
            
            if score > best_score:
                best_score = score
                if score >= threshold:
                    # ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ Threshold ‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠
                    name = os.path.splitext(label)[0]
                    best_label = name
                    
        # --- ‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Unknown Face ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö (Real-Time Saving) ---
        if best_label == "Unknown" and save_unknown:
            # ‡πÉ‡∏ä‡πâ last_save_time ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà **‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û** if last_save_time[0] == 0 or (current_time - last_save_time[0] >= save_interval):
                with unknown_lock:
                    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S_%f")
                    filename = os.path.join(UNKNOWN_FOLDER, f"unknown_{timestamp}.jpg")
                    
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Unknown (‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢ margin)
                    cv2.imwrite(filename, face_roi) 
                    
                    print(f"Saved unknown face: {filename}")
                    last_save_time[0] = current_time # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        # ----------------------------------------------------------------------
                    
        # ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å
        detections.append((x_orig, y_orig, w_orig, h_orig, best_label))
        
    return detections

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
def put_flipped_text(frame, text, x, y, font=cv2.FONT_HERSHEY_SIMPLEX,
                     font_scale=1.0, color=(0, 255, 0), thickness=3):
    ((text_w, text_h), _) = cv2.getTextSize(text, font, font_scale, thickness)
    text_img = np.zeros((text_h + 20, text_w + 20, 3), dtype=np.uint8)

    # ‡∏ß‡∏≤‡∏î‡∏Ç‡∏≠‡∏ö‡∏î‡∏≥‡∏´‡∏ô‡∏≤ (outline)
    cv2.putText(text_img, text, (10, text_h + 10), font, font_scale, (0, 0, 0), thickness + 2, lineType=cv2.LINE_AA)
    # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ö‡∏ô‡∏Ç‡∏≠‡∏ö
    cv2.putText(text_img, text, (10, text_h + 10), font, font_scale, color, thickness, lineType=cv2.LINE_AA)

    # ‡∏û‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏û‡∏•‡∏¥‡∏Å
    flipped_text_img = cv2.flip(text_img, 1)

    h, w, _ = flipped_text_img.shape
    x = max(0, x - w)
    y = max(h, y)

    if y - h < 0 or x + w > frame.shape[1]:
        return

    roi = frame[y - h:y, x:x + w]

    # ‡πÅ‡∏õ‡∏∞‡πÅ‡∏ö‡∏ö non-black pixel (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏ö)
    mask = np.any(flipped_text_img != [0, 0, 0], axis=2)
    roi[mask] = flipped_text_img[mask]

    frame[y - h:y, x:x + w] = roi


def draw_detections(frame, detections):
    """‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ô‡πÄ‡∏ü‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß"""
    for x, y, w, h, label in detections:
        color = (0, 255, 0) if label != "Unknown" else (0, 0, 255)
        cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
        put_flipped_text(frame, label, x, y - 10, color=color)

# ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á
cap = cv2.VideoCapture(0)

def get_unique_filename(folder, filename):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô"""
    name, ext = os.path.splitext(filename)
    counter = 1
    new_filename = filename
    while os.path.exists(os.path.join(folder, new_filename)):
        new_filename = f"{name}_{counter}{ext}"
        counter += 1
    return new_filename

# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
recording = False
out = None
record_thread = None

def record_video():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡πÉ‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡πÅ‡∏¢‡∏Å"""
    global recording, out, cap
    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    
    if not cap.isOpened():
        print("Error: Camera not open for recording.")
        recording = False # ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        return
        
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
    
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = os.path.join(VIDEO_FOLDER, f"record_{timestamp}.mp4")
    
    try:
        out = cv2.VideoWriter(filename, fourcc, 20.0, (width, height))
    except Exception as e:
        print(f"Error creating VideoWriter: {e}")
        recording = False
        return
        
    print(f'Start recording: {filename}')
    
    # ‡∏î‡∏∂‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    while recording:
        ret, frame = cap.read()
        if not ret:
            print("Error: Failed to read frame for recording.")
            break
        frame = cv2.flip(frame, 1) # ‡∏û‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
        out.write(frame)
        time.sleep(0.05) # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
        
    if out:
        out.release()
    print('Stopped recording.')

# --- Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á) ---
@app.route('/start_recording', methods=['POST'])
def start_recording():
    global recording, record_thread
    if recording:
        return jsonify({'status': 'already recording'}), 400
    if not cap.isOpened():
        return jsonify({'status': 'camera not open'}), 500
        
    recording = True
    record_thread = threading.Thread(target=record_video)
    record_thread.start()
    return jsonify({'status': 'recording started'})

@app.route('/stop_recording', methods=['POST'])
def stop_recording():
    global recording, record_thread
    if not recording:
        return jsonify({'status': 'not recording'}), 400
    recording = False
    # ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏£‡∏î‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏ö
    if record_thread and record_thread.is_alive():
        record_thread.join() 
    return jsonify({'status': 'recording stopped'})
# ------------------------------------

# --- Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏•‡∏±‡∏Å) ---
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/camera')
def camera():
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    is_camera_open = cap.isOpened()
    return render_template('camera.html', is_camera_open=is_camera_open)

@app.route('/upload', methods=['GET'])
def upload():
    images = os.listdir(app.config['UPLOAD_FOLDER'])
    # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
    images = [img for img in images if img.lower().endswith(('.png', '.jpg', '.jpeg', '.gif'))]
    success = request.args.get('success')
    filename = request.args.get('filename')
    return render_template('upload.html', images=images, success=success, filename=filename)

@app.route('/upload', methods=['POST'])
def upload_image():
    global templates 
    
    if 'image_file' not in request.files:
        flash('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î', 'error')
        return redirect(url_for('upload'))
        
    file = request.files['image_file']
    
    if file.filename == '':
        flash('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå', 'error')
        return redirect(url_for('upload'))
        
    # 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
    filename = secure_filename(file.filename)
    filename = get_unique_filename(app.config['UPLOAD_FOLDER'], filename)
    save_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    file.save(save_path) 
    
    # --- ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (Grayscale + Resize) ---
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        img = cv2.imread(save_path)
        if img is None:
            flash(f'‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û **{filename}** ‡πÑ‡∏î‡πâ', 'error')
            os.remove(save_path) # ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏≠‡∏Å
            return redirect(url_for('upload'))

        # 1. ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        
        # 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î (Resize) 
        # ‡πÉ‡∏ä‡πâ TARGET_SIZE ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
        resized_gray = cv2.resize(gray, TARGET_SIZE, interpolation=cv2.INTER_AREA)

        # 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        cv2.imwrite(save_path, resized_gray) 
        print(f"Processed image saved: {save_path} (Grayscale, {TARGET_SIZE})")

    except Exception as e:
        print(f"Error processing image {filename}: {e}")
    # ----------------------------------------------------------------------
    
    # 2. ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    templates_before = len(templates)
    templates = load_templates(app.config['UPLOAD_FOLDER'])
    templates_after = len(templates)
    
    # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
    is_template_created = any(t[0] == filename for t in templates)

    if is_template_created:
        flash(f'‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î, ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• (Grayscale, {TARGET_SIZE[0]}x{TARGET_SIZE[1]}), ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå **{filename}** ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success')
    else:
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï (‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤)
        flash(f'‚ö†Ô∏è ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå **{filename}** ‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà **‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤** ‡πÉ‡∏ô‡∏†‡∏≤‡∏û ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï', 'warning')
        
    return redirect(url_for('upload', success='true', filename=filename))

@app.route('/delete/<filename>', methods=['POST'])
def delete_image(filename):
    global templates 
    filename = secure_filename(filename)
    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
    
    if os.path.exists(file_path):
        os.remove(file_path)
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö
        templates = load_templates(app.config['UPLOAD_FOLDER']) 
        
        flash(f'üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ **{filename}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'info')
        return redirect(url_for('upload'))
    else:
        abort(404)

@app.route('/delete_all', methods=['POST'])
def delete_all_images():
    global templates 
    images = os.listdir(app.config['UPLOAD_FOLDER'])
    count = 0
    for img in images:
        if img.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
            try:
                os.remove(os.path.join(app.config['UPLOAD_FOLDER'], img))
                count += 1
            except Exception as e:
                print(f'Error deleting file {img}: {e}')
                
    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    templates = load_templates(app.config['UPLOAD_FOLDER'])
    
    flash(f'üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {count} ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'info')
    return redirect(url_for('upload'))

@app.route('/uploads/<filename>')
def uploaded_file(filename):
    return send_from_directory(app.config['UPLOAD_FOLDER'], filename)

@app.route('/videos')
def videos():
    files = os.listdir(app.config['VIDEO_FOLDER'])
    videos = [v for v in files if v.lower().endswith(('.mp4', '.avi', '.mov'))]
    videos_with_time = []
    for v in videos:
        path = os.path.join(app.config['VIDEO_FOLDER'], v)
        try:
            timestamp = os.path.getmtime(path)
            dt = datetime.datetime.fromtimestamp(timestamp)
            formatted_time = dt.strftime('%Y-%m-%d %H:%M:%S')
        except OSError:
            formatted_time = 'N/A' 
        videos_with_time.append({
            'filename': v,
            'time': formatted_time
        })
    return render_template('videos.html', videos=videos_with_time)

@app.route('/videos/<filename>')
def video_file(filename):
    filename = secure_filename(filename)
    return send_from_directory(app.config['VIDEO_FOLDER'], filename)

@app.route('/delete_video/<filename>', methods=['POST'])
def delete_video(filename):
    filename = secure_filename(filename)
    file_path = os.path.join(app.config['VIDEO_FOLDER'], filename)
    if os.path.exists(file_path):
        os.remove(file_path)
        flash(f'üóëÔ∏è ‡∏•‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠ **{filename}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'info')
        return redirect(url_for('videos'))
    else:
        abort(404)

@app.route('/video_feed')
def video_feed():
    if not cap.isOpened():
        # ‡∏´‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏≠‡∏≤‡∏à‡∏à‡∏∞ redirect ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        return Response("Camera Not Available", status=500, mimetype='text/plain')
        
    try:
        threshold = float(request.args.get('threshold', 0.5))
    except:
        threshold = 0.5
    try:
        min_size = int(request.args.get('min_size', 50))
    except:
        min_size = 50

    scales = [0.8, 0.9, 1.0, 1.1, 1.2]

    def generate():
        frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break

            # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û (‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏™‡∏µ)
            detections = detect_face_templates(frame, threshold=threshold, scales=scales, min_size=min_size)

            # 2. ‡∏û‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏û‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏Ñ‡∏°
            frame = cv2.flip(frame, 1)

            # 3. ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏û‡∏•‡∏¥‡∏Å
            flipped_detections = []
            for x, y, w, h, label in detections:
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á x ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏•‡∏¥‡∏Å
                flipped_x = frame_width - (x + w) 
                flipped_detections.append((flipped_x, y, w, h, label))

            # 4. ‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏û‡∏•‡∏¥‡∏Å‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
            draw_detections(frame, flipped_detections)

            ret2, buffer = cv2.imencode('.jpg', frame)
            frame_bytes = buffer.tobytes()
            yield (b'--frame\r\nContent-Type: image/jpeg\r\n\r\n' + frame_bytes + b'\r\n')

    return Response(generate(), mimetype='multipart/x-mixed-replace; boundary=frame')

# ----------------------------------------------------------------------
# --- ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Email (SMTP) ---
# ----------------------------------------------------------------------

def send_notification_email(filename, image_path):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û Unknown Face
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô True ‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå, False ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    """
    print(f"--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Unknown Face: {filename} ---")
    
    msg = MIMEMultipart()
    msg['From'] = SENDER_EMAIL
    msg['To'] = RECEIVER_EMAIL
    msg['Subject'] = f"üö® ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ({filename})"

    body = f"‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö,\n\n‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤\n"
    msg.attach(MIMEText(body, 'plain'))
    
    email_sent_successfully = False

    try:
        # ‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        # ‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î
        if not os.path.exists(image_path):
             print(f"‚ùå Error: File not found at {image_path}")
             return False
             
        with open(image_path, 'rb') as fp:
            img = MIMEImage(fp.read(), _subtype="jpeg")
            img.add_header('Content-Disposition', 'attachment', filename=filename)
            msg.attach(img)

        # üéØ ‡πÉ‡∏ä‡πâ smtplib.SMTP_SSL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Port 465 
        server = smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT)
        
        # ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
        server.login(SENDER_EMAIL, SENDER_PASSWORD)
        
        # ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
        server.sendmail(SENDER_EMAIL, RECEIVER_EMAIL, msg.as_string())
        server.quit()
        
        print("‚úÖ ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        email_sent_successfully = True
        
    except smtplib.SMTPAuthenticationError:
        print("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô SMTP: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö App Password ‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
    except Exception as e:
        print(f"‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•: {e}")
        
    # --- ‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ---
    if email_sent_successfully:
        try:
            os.remove(image_path)
            print(f"üóëÔ∏è ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename} ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        except Exception as e:
            print(f"‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå {filename}: {e}")
            
    return email_sent_successfully


def monitor_unknown_folder():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡πÅ‡∏¢‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ù‡πâ‡∏≤‡∏î‡∏π‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Unknown
    ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•)
    """
    global last_email_time
    print("--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Unknown ---")
    
    while True:
        try:
            current_time = time.time()
            
            # üí° ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏ß‡∏°: ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            if current_time - last_email_time[0] >= EMAIL_NOTIFICATION_INTERVAL:
                
                # ‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå Unknown
                # ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                files = os.listdir(app.config['UNKNOWN_FOLDER'])
                files_to_process = sorted([f for f in files if f.lower().endswith(('.jpg', '.jpeg', '.png'))])

                if files_to_process:
                    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö (‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
                    filename = files_to_process[0]
                    file_path = os.path.join(app.config['UNKNOWN_FOLDER'], filename)
                    
                    # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
                    time.sleep(0.5) 
                    
                    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
                    if send_notification_email(filename, file_path):
                        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡∏°‡πà
                        last_email_time[0] = current_time
                        
        
        except Exception as e:
            print(f"Error ‡πÉ‡∏ô Unknown Folder Monitor: {e}")
        
        time.sleep(1) # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡πÜ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ

# ----------------------------------------------------------------------

# ‡∏£‡∏±‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡∏°‡∏≠‡∏ô‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏≠‡∏õ (Daemon=True ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ò‡∏£‡∏î‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏¢‡∏∏‡∏î)
monitor_thread = threading.Thread(target=monitor_unknown_folder, daemon=True)
monitor_thread.start()

if __name__ == '__main__':
    # ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô Main Thread ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à
    templates = load_templates(UPLOAD_FOLDER) 
    
    try:
        # ‚ö†Ô∏è ‡πÉ‡∏ä‡πâ use_reloader=False ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡πÉ‡∏ô‡πÄ‡∏ò‡∏£‡∏î‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        app.run(host='0.0.0.0', port=5000, debug=True, threaded=True, use_reloader=False) 
    except KeyboardInterrupt:
        print("Server shutting down...")
    finally:
        # ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏Ø ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        if cap.isOpened():
            cap.release()
            print("Camera released.")